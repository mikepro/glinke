(defun glinke--get-base-repo-url()
  (let ((repo-url (car (magit-config-get-from-cached-list "remote.origin.url"))))
    (if (not repo-url) (user-error "no origin set"))
    (if (string-match "^git@" repo-url)
        (setq repo-url (replace-regexp-in-string "git@github.com:\\(.+?\\)/\\(.+?\\)\\.git" "https://github.com/\\1/\\2" repo-url))
        )
    (if (string-match "^https://github.com" repo-url)
        (setq repo-url (replace-regexp-in-string "https://github.com/\\(.+?\\)/\\(.+?\\)\\.git" "https://github.com/\\1/\\2" repo-url))
        )
    (if (not (string-match "github" repo-url)) (user-error "must be a github repo"))
    repo-url
    )
  )

(defun glinke-open-file-in-github ()
  (interactive)
  (let ((repo-url (glinke--get-base-repo-url))
        (sha1 (magit-rev-parse "HEAD"))
        (file-path (magit-current-file)))
    (browse-url (format "%s/blob/%s/%s" repo-url sha1 file-path))))

(defun glinke-open-root-in-github()
  (interactive)
  (let ((repo-url (glinke--get-base-repo-url)))
    (browse-url (format "%s" repo-url))))

(defun glinke-open-pull-requests ()
  (interactive)
  (let ((repo-url (glinke--get-base-repo-url)))
    (browse-url (format "%s/pulls" repo-url))))

(defun glinke-projectile-open-root-in-github()
  (interactive)
  (let ((projectile-switch-project-action 'glinke-open-root-in-github))
    (projectile-switch-project)))

(defun glinke-projectile-open-pull-requests()
  (interactive)
  (let ((projectile-switch-project-action 'glinke-open-pull-requests))
    (projectile-switch-project)))
